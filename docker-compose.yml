version: '3.8'

services:
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://zipkin:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - monitoring1

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: library
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - monitoring1

  postgres-kc:
    image: postgres:14
    container_name: postgres-kc
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "15432:5432"
    volumes:
      - postgres_data_kc:/var/lib/postgresql/data
    networks:
      - monitoring1
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak -d keycloak" ]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    depends_on:
      postgres-kc:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-kc:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY: edge
      KEYCLOAK_IMPORT: ./keycloak/library-realm.json
    volumes:
      - ./keycloak/library-realm.json:/opt/keycloak/data/import/realm.json
    #      KC_HOSTNAME: localhost
    command: ["start-dev", "--import-realm"]
    ports:
      - "9000:8080"
    networks:
      - monitoring1


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - monitoring1
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 7071:7071  # JMX Exporter port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OPTS: "-javaagent:/usr/app/jmx_prometheus_javaagent-0.20.0.jar=7071:/etc/jmx-exporter/kafka-jmx-exporter.yml"
    volumes:
      - ./jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar:/usr/app/jmx_prometheus_javaagent-0.20.0.jar
      - ./jmx_exporter/kafka-jmx-exporter.yml:/etc/jmx-exporter/kafka-jmx-exporter.yml
    networks:
      - monitoring1
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - 8082:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - monitoring1

  configuration-service:
    build:
      context: .
      dockerfile: configuration/Dockerfile
    container_name: configuration-service
    environment:
      - SERVICE_PORT=8888
      - GIT_URI=https://github.com/avmiki80/otus-config/
    ports:
      - "8888:8888"
    networks:
      - monitoring1

  eureka-service1:
    build:
      context: .
      dockerfile: eureka/Dockerfile
    container_name: eureka-service1
    environment:
      - SERVICE_PORT=8761
      - SPRING_PROFILES_ACTIVE=node1
      - EUREKA_URL=http://eureka-service2:8761/eureka, http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
    ports:
      - "8761:8761"
    networks:
      - monitoring1
    depends_on:
      - configuration-service

  eureka-service2:
    build:
      context: .
      dockerfile: eureka/Dockerfile
    container_name: eureka-service2
    environment:
      - SERVICE_PORT=8761
      - SPRING_PROFILES_ACTIVE=node2
      - EUREKA_URL=http://eureka-service1:8761/eureka, http://eureka-service2:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
    ports:
      - "8762:8761"
    networks:
      - monitoring1
    depends_on:
      - configuration-service

  gateway-service:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: gateway-service
    environment:
      - SERVICE_PORT=8080
      - EUREKA_URL=http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - AUTH_HOST=keycloak
      - AUTH_PORT=8080
      - CONFIG_HOST=configuration-service
      - CONFIG_PORT=8888
      - ISSUER_URI=http://keycloak:8080/realms/library
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
    ports:
      - "8080:8080"
    networks:
      - monitoring1
    depends_on:
      - configuration-service
      - eureka-service1
      - keycloak

  moderator-service:
    build:
      context: .
      dockerfile: moderator/Dockerfile
    container_name: moderator-service
    environment:
      - SERVICE_PORT=8081
      - DB_URL=jdbc:postgresql://postgres:5432/library?currentSchema=moderate
      - DB_LOGIN=postgres
      - DB_PASSWORD=postgres
      - KAFKA_URL=kafka:29092
      - EUREKA_URL=http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - TOKEN_URL=http://keycloak:8080/realms/library/protocol/openid-connect/token
      - MAIL_SEND_MODE=kafka
      - MAIL_SENDER_URL=http://mailsender:8080
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
      - LOGGING_ROOT_LEVEL=INFO
      - LOGGING_LEVEL=ERROR
      - LOGGING_KAFKA_LEVEL=ERROR
#    ports:
#      - "8091:8080"
    networks:
      - monitoring1
    depends_on:
      - configuration-service
      - eureka-service1
      - gateway-service

  moderator-service2:
    build:
      context: .
      dockerfile: moderator/Dockerfile
    container_name: moderator-service2
    environment:
      - SERVICE_PORT=8082
      - DB_URL=jdbc:postgresql://postgres:5432/library?currentSchema=moderate
      - DB_LOGIN=postgres
      - DB_PASSWORD=postgres
      - KAFKA_URL=kafka:29092
      - EUREKA_URL=http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - TOKEN_URL=http://keycloak:8080/realms/library/protocol/openid-connect/token
      - MAIL_SEND_MODE=kafka
      - MAIL_SENDER_URL=http://mailsender:8080
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
      - LOGGING_ROOT_LEVEL=INFO
      - LOGGING_LEVEL=ERROR
      - LOGGING_KAFKA_LEVEL=ERROR
#    ports:
#      - "8092:8081"
    networks:
      - monitoring1
    depends_on:
      - configuration-service
      - eureka-service1
      - gateway-service

  moderator-service3:
    build:
      context: .
      dockerfile: moderator/Dockerfile
    container_name: moderator-service3
    environment:
      - SERVICE_PORT=8083
      - DB_URL=jdbc:postgresql://postgres:5432/library?currentSchema=moderate
      - DB_LOGIN=postgres
      - DB_PASSWORD=postgres
      - KAFKA_URL=kafka:29092
      - EUREKA_URL=http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - TOKEN_URL=http://keycloak:8080/realms/library/protocol/openid-connect/token
      - MAIL_SEND_MODE=kafka
      - MAIL_SENDER_URL=http://mailsender:8080
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
      - LOGGING_ROOT_LEVEL=INFO
      - LOGGING_LEVEL=ERROR
      - LOGGING_KAFKA_LEVEL=ERROR
    networks:
      - monitoring1
    depends_on:
      - configuration-service
      - eureka-service1
      - gateway-service

  book-service:
    build:
      context: .
      dockerfile: book/Dockerfile
    container_name: book-service
    environment:
      - SERVICE_PORT=8080
      - DB_URL=jdbc:postgresql://postgres:5432/library?currentSchema=library
      - DB_LOGIN=postgres
      - DB_PASSWORD=postgres
      - KAFKA_URL=kafka:29092
      - MODERATOR_SERVICE_URL=http://moderator-service:8081
      - EUREKA_URL=http://eureka-service2:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
      - MODERATOR_MODE=kafka
      - HIKARI_MAXIMUM_POOLSIZE=20
      - HIKARI_CONNECTION_TIMEOUT=60000
      - LOGGING_ROOT_LEVEL=INFO
      - LOGGING_LEVEL=ERROR
      - LOGGING_KAFKA_LEVEL=ERROR
      - LOGGING_FEIGN_LEVEL=ERROR
#    ports:
#      - "8101:8080"
    networks:
      - monitoring1
    depends_on:
      - moderator-service
      - configuration-service
      - eureka-service1
      - gateway-service

  mailsender:
    build:
      context: .
      dockerfile: mailsender/Dockerfile
    container_name: mailsender
    environment:
      - SERVICE_PORT=8080
      - KAFKA_URL=kafka:29092
      - EUREKA_URL=http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
      - LOGGING_ROOT_LEVEL=INFO
      - LOGGING_LEVEL=ERROR
      - LOGGING_KAFKA_LEVEL=ERROR
    networks:
      - monitoring1
    depends_on:
      - configuration-service
      - eureka-service1
      - gateway-service

  loan-service:
    build:
      context: .
      dockerfile: loan/Dockerfile
    container_name: loan-service
    environment:
      - SERVICE_PORT=8080
      - DB_URL=jdbc:postgresql://postgres:5432/library?currentSchema=library
      - DB_LOGIN=postgres
      - DB_PASSWORD=postgres
      - KAFKA_URL=kafka:29092
      - EUREKA_URL=http://eureka-service1:8761/eureka
      - CONFIG_IMPORT=configserver:http://configuration-service:8888
      - JWK_URI=http://keycloak:8080/realms/library/protocol/openid-connect/certs
      - BOOK_FIND_MODE=feign
      - BOOK_SERVICE_URL=http://book-service:8080
      - MAIL_SEND_MODE=kafka
      - MAIL_SENDER_URL=http://mailsender:8080
      - TRACE_URL=http://zipkin:9411
      - TRACE_ENABLED=true
      - LOGGING_ROOT_LEVEL=INFO
      - LOGGING_LEVEL=ERROR
      - LOGGING_KAFKA_LEVEL=ERROR
      - LOGGING_FEIGN_LEVEL=ERROR
    networks:
      - monitoring1
    depends_on:
      - configuration-service
      - eureka-service1
      - gateway-service

  prometheus:
    image: prom/prometheus
    container_name: prometheus
#    ports:
#      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./jmx_exporter/kafka-jmx-exporter.yml:/etc/jmx/kafka-jmx-exporter.yml
    networks:
      - monitoring1
    depends_on:
      - book-service
      - moderator-service
      - kafka

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "7000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-storage:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_DISABLE_INITIAL_ADMIN_PASSWORD_HINT: "true"
    networks:
      - monitoring1
    depends_on:
      - prometheus

volumes:
  grafana-storage:
  postgres_data:
  postgres_data_kc:

networks:
  monitoring1:
    driver: bridge